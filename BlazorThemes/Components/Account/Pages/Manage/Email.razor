@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorThemes.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Manage email</PageTitle>

<MudText Typo="Typo.h6" GutterBottom="true">Manage email</MudText>

<StatusMessage Message="@message" />

<form 
    @onsubmit="OnSendEmailVerificationAsync"
    @formname="send-verification"
    id="send-verification-form"
    method="post">
    <AntiforgeryToken />
</form>
<EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />

    <MudGrid>

        @if (isEmailConfirmed)
        {
            <MudItem md="12">
                <MudStaticTextField 
                    Value="@email"
                    Label="Email" 
                    Placeholder="Please enter your email."
                    Disabled="true" 
                    AdornmentIcon="Icons.Material.Filled.Check"
                    AdornmentColor="Color.Success" />
            </MudItem>
        }
        else
        {
            <MudItem md="12">
                <MudStaticTextField 
                    Value="@email" 
                    Label="Email" 
                    Placeholder="Please enter your email."
                    Disabled="true" />
            </MudItem>
            
            <MudItem md="12">
                <MudStaticButton
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    FullWidth="true"
                    FormAction="FormAction.Submit">
                    Enviar e-mail de verificação
                </MudStaticButton>
            </MudItem>
        }

        <MudItem md="12">
            <MudTextField
                @bind-Value="@Input.NewEmail"
                Label="New Email"
                HelperText="Please enter new email."
                UserAttributes="@(new Dictionary<string, object> { { "autocomplete", "email" }, { "aria-required", "true" } })" />
        </MudItem>

        <MudItem md="12">
            <MudStaticButton
                Variant="Variant.Filled"
                Color="Color.Primary"
                FullWidth="true"
                FormAction="FormAction.Submit">
                Alterar e-mail
            </MudStaticButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Seu e-mail não foi alterado.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Link de confirmação para alterar o e-mail enviado. Por favor, verifique seu e-mail.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "O e-mail de verificação foi enviado. Por favor, verifique seu e-mail.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }

    internal interface IEmailSender<T>
    {
        Task SendConfirmationLinkAsync(ApplicationUser applicationUser, string s, string encode);
        Task SendEmailAsync(string s, string confirmYourEmail, string s1);
    }

}