@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using BlazorThemes.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager

<PageTitle>Log in</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Log in</MudText>

<EditForm Model="Input" OnValidSubmit="LoginUser">
    <MudGrid>
        <MudItem md="12">
            <MudTextField For="@(() => Input.Email)" bind-Value="Input.Email"
                          Label="Email" Placeholder="name@example.com"
                          UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } })" />
        </MudItem>

        <MudItem md="12">
            <MudTextField For="@(() => Input.Password)" bind-Value="Input.Password"
                          Label="Password" InputType="InputType.Password" Placeholder="password"
                          UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } })" />
        </MudItem>

        <MudItem md="12">
            <MudCheckBox For="@(() => Input.RememberMe)" bind-Value="Input.RememberMe">
                Remember me
            </MudCheckBox>
        </MudItem>

        <MudItem md="12">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       FullWidth="true"
                       Type="Submit">
                Log in
            </MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Error">
        @errorMessage
    </MudAlert>
}

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync("External");
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

            Logger.LogInformation("User logged in.");

            // Se ReturnUrl for inválido ou nulo, redireciona para a página inicial
            if (string.IsNullOrEmpty(ReturnUrl) || !Uri.IsWellFormedUriString(ReturnUrl, UriKind.RelativeOrAbsolute))
            {
                NavigationManager.NavigateTo("/"); // Página inicial
            }
            else
            {
                NavigationManager.NavigateTo(ReturnUrl); // Redirecionar para ReturnUrl
            }
        
       
            Logger.LogWarning("Usuário bloqueado após múltiplas tentativas. Redirecionando para a página de bloqueio.");
            NavigationManager.NavigateTo("/Account/Lockout");
        
        
            errorMessage = "Erro: Tentativa de login inválida.";
            Logger.LogWarning(errorMessage);
        
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}



